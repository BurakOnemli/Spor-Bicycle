
Bicycle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c10  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000cd0  08000cd0  00010cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cec  08000cec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000cec  08000cec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cec  08000cec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cec  08000cec  00010cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cf0  08000cf0  00010cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08000d00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000d00  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003233  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001148  00000000  00000000  00023267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  000243b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000320  00000000  00000000  00024798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f928  00000000  00000000  00024ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ee6  00000000  00000000  000343e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b844  00000000  00000000  0003a2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00095b0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af4  00000000  00000000  00095b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000cb8 	.word	0x08000cb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08000cb8 	.word	0x08000cb8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b7f      	cmp	r3, #127	; 0x7f
 8000234:	d828      	bhi.n	8000288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000236:	4a2f      	ldr	r2, [pc, #188]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b25b      	sxtb	r3, r3
 800023e:	089b      	lsrs	r3, r3, #2
 8000240:	33c0      	adds	r3, #192	; 0xc0
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	589b      	ldr	r3, [r3, r2]
 8000246:	1dfa      	adds	r2, r7, #7
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	0011      	movs	r1, r2
 800024c:	2203      	movs	r2, #3
 800024e:	400a      	ands	r2, r1
 8000250:	00d2      	lsls	r2, r2, #3
 8000252:	21ff      	movs	r1, #255	; 0xff
 8000254:	4091      	lsls	r1, r2
 8000256:	000a      	movs	r2, r1
 8000258:	43d2      	mvns	r2, r2
 800025a:	401a      	ands	r2, r3
 800025c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	019b      	lsls	r3, r3, #6
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	401a      	ands	r2, r3
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	0018      	movs	r0, r3
 800026c:	2303      	movs	r3, #3
 800026e:	4003      	ands	r3, r0
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000274:	481f      	ldr	r0, [pc, #124]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b25b      	sxtb	r3, r3
 800027c:	089b      	lsrs	r3, r3, #2
 800027e:	430a      	orrs	r2, r1
 8000280:	33c0      	adds	r3, #192	; 0xc0
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000286:	e031      	b.n	80002ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000288:	4a1b      	ldr	r2, [pc, #108]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	0019      	movs	r1, r3
 8000290:	230f      	movs	r3, #15
 8000292:	400b      	ands	r3, r1
 8000294:	3b08      	subs	r3, #8
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	3306      	adds	r3, #6
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	18d3      	adds	r3, r2, r3
 800029e:	3304      	adds	r3, #4
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1dfa      	adds	r2, r7, #7
 80002a4:	7812      	ldrb	r2, [r2, #0]
 80002a6:	0011      	movs	r1, r2
 80002a8:	2203      	movs	r2, #3
 80002aa:	400a      	ands	r2, r1
 80002ac:	00d2      	lsls	r2, r2, #3
 80002ae:	21ff      	movs	r1, #255	; 0xff
 80002b0:	4091      	lsls	r1, r2
 80002b2:	000a      	movs	r2, r1
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	401a      	ands	r2, r3
 80002b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	22ff      	movs	r2, #255	; 0xff
 80002c0:	401a      	ands	r2, r3
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	0018      	movs	r0, r3
 80002c8:	2303      	movs	r3, #3
 80002ca:	4003      	ands	r3, r0
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	001c      	movs	r4, r3
 80002d8:	230f      	movs	r3, #15
 80002da:	4023      	ands	r3, r4
 80002dc:	3b08      	subs	r3, #8
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	430a      	orrs	r2, r1
 80002e2:	3306      	adds	r3, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18c3      	adds	r3, r0, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b003      	add	sp, #12
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	e000e100 	.word	0xe000e100
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	1e5a      	subs	r2, r3, #1
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	045b      	lsls	r3, r3, #17
 800030c:	429a      	cmp	r2, r3
 800030e:	d301      	bcc.n	8000314 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000310:	2301      	movs	r3, #1
 8000312:	e010      	b.n	8000336 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <SysTick_Config+0x44>)
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	3a01      	subs	r2, #1
 800031a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800031c:	2301      	movs	r3, #1
 800031e:	425b      	negs	r3, r3
 8000320:	2103      	movs	r1, #3
 8000322:	0018      	movs	r0, r3
 8000324:	f7ff ff7c 	bl	8000220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <SysTick_Config+0x44>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800032e:	4b04      	ldr	r3, [pc, #16]	; (8000340 <SysTick_Config+0x44>)
 8000330:	2207      	movs	r2, #7
 8000332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000334:	2300      	movs	r3, #0
}
 8000336:	0018      	movs	r0, r3
 8000338:	46bd      	mov	sp, r7
 800033a:	b002      	add	sp, #8
 800033c:	bd80      	pop	{r7, pc}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	e000e010 	.word	0xe000e010

08000344 <main>:

volatile uint16_t countPerInterrupt = 0;
volatile uint8_t oneSecondIsOver = 0;
char BUFFER[CHAR_BUFF_SIZE];
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
	uint8_t tick = 0;
 800034a:	1dfb      	adds	r3, r7, #7
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
	uint8_t notGoingToSleep = 0;
 8000350:	1dbb      	adds	r3, r7, #6
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
	uint8_t readADC = 0;
 8000356:	1d7b      	adds	r3, r7, #5
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
	HAL_Init();
 800035c:	f000 f998 	bl	8000690 <HAL_Init>
	SystemClock_Config();
 8000360:	f000 fba0 	bl	8000aa4 <SystemClock_Config>
	SystemCoreClockUpdate();
 8000364:	f000 f89a 	bl	800049c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000);
 8000368:	4b2f      	ldr	r3, [pc, #188]	; (8000428 <main+0xe4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	22fa      	movs	r2, #250	; 0xfa
 800036e:	0091      	lsls	r1, r2, #2
 8000370:	0018      	movs	r0, r3
 8000372:	f7ff fec9 	bl	8000108 <__udivsi3>
 8000376:	0003      	movs	r3, r0
 8000378:	0018      	movs	r0, r3
 800037a:	f7ff ffbf 	bl	80002fc <SysTick_Config>

	GPIO_Start_Output(GPIOB, GREEN_LED_PIN, LOW);
 800037e:	4b2b      	ldr	r3, [pc, #172]	; (800042c <main+0xe8>)
 8000380:	2200      	movs	r2, #0
 8000382:	2108      	movs	r1, #8
 8000384:	0018      	movs	r0, r3
 8000386:	f000 fb33 	bl	80009f0 <GPIO_Start_Output>
	GPIO_Start_Output(GPIOB, RED_LED_PIN, LOW);
 800038a:	4b28      	ldr	r3, [pc, #160]	; (800042c <main+0xe8>)
 800038c:	2200      	movs	r2, #0
 800038e:	2110      	movs	r1, #16
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fb2d 	bl	80009f0 <GPIO_Start_Output>
	GPIO_Start_Output(GPIOB, BUZZER_PIN, LOW);
 8000396:	4b25      	ldr	r3, [pc, #148]	; (800042c <main+0xe8>)
 8000398:	2200      	movs	r2, #0
 800039a:	2120      	movs	r1, #32
 800039c:	0018      	movs	r0, r3
 800039e:	f000 fb27 	bl	80009f0 <GPIO_Start_Output>

	GPIOA->MODER |= GPIO_MODER_MODE15_1; //PIN15 alternative RX
 80003a2:	23a0      	movs	r3, #160	; 0xa0
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	23a0      	movs	r3, #160	; 0xa0
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	2180      	movs	r1, #128	; 0x80
 80003ae:	0609      	lsls	r1, r1, #24
 80003b0:	430a      	orrs	r2, r1
 80003b2:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE15_0;
 80003b4:	23a0      	movs	r3, #160	; 0xa0
 80003b6:	05db      	lsls	r3, r3, #23
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	23a0      	movs	r3, #160	; 0xa0
 80003bc:	05db      	lsls	r3, r3, #23
 80003be:	491c      	ldr	r1, [pc, #112]	; (8000430 <main+0xec>)
 80003c0:	400a      	ands	r2, r1
 80003c2:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[1] |= ( 4 << GPIO_AFRH_AFSEL15_Pos );
 80003c4:	23a0      	movs	r3, #160	; 0xa0
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003ca:	23a0      	movs	r3, #160	; 0xa0
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	05c9      	lsls	r1, r1, #23
 80003d2:	430a      	orrs	r2, r1
 80003d4:	625a      	str	r2, [r3, #36]	; 0x24


	ADC_calibrate(ADC1); // This is used to calibrate the ADC check reference manuel for more information
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <main+0xf0>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 faa1 	bl	8000920 <ADC_calibrate>
	ADC_init(ADC1);
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <main+0xf0>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f000 fac5 	bl	8000970 <ADC_init>

	TIM_Start(TIM2);
 80003e6:	2380      	movs	r3, #128	; 0x80
 80003e8:	05db      	lsls	r3, r3, #23
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fbee 	bl	8000bcc <TIM_Start>

	UART_init(USART2);
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <main+0xf4>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 fc2c 	bl	8000c50 <UART_init>
//	GPIO_Write(GPIOB, RED_LED_PIN, GPIO_LOW);
//	GPIO_Write(GPIOB, GREEN_LED_PIN, GPIO_HIGH);

	while (1)
	{
		GPIO_Write(GPIOB, GREEN_LED_PIN, GPIO_HIGH);
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <main+0xe8>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	2108      	movs	r1, #8
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fb37 	bl	8000a72 <GPIO_Write>
		HAL_Delay(1000);
 8000404:	23fa      	movs	r3, #250	; 0xfa
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	0018      	movs	r0, r3
 800040a:	f000 f9b1 	bl	8000770 <HAL_Delay>
		GPIO_Write(GPIOB, GREEN_LED_PIN, GPIO_LOW);
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <main+0xe8>)
 8000410:	2200      	movs	r2, #0
 8000412:	2108      	movs	r1, #8
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fb2c 	bl	8000a72 <GPIO_Write>
		HAL_Delay(1000);
 800041a:	23fa      	movs	r3, #250	; 0xfa
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	0018      	movs	r0, r3
 8000420:	f000 f9a6 	bl	8000770 <HAL_Delay>
		GPIO_Write(GPIOB, GREEN_LED_PIN, GPIO_HIGH);
 8000424:	e7e8      	b.n	80003f8 <main+0xb4>
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	20000000 	.word	0x20000000
 800042c:	50000400 	.word	0x50000400
 8000430:	bfffffff 	.word	0xbfffffff
 8000434:	40012400 	.word	0x40012400
 8000438:	40004400 	.word	0x40004400

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <HAL_MspInit+0x24>)
 8000442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <HAL_MspInit+0x24>)
 8000446:	2101      	movs	r1, #1
 8000448:	430a      	orrs	r2, r1
 800044a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <HAL_MspInit+0x24>)
 800044e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <HAL_MspInit+0x24>)
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	0549      	lsls	r1, r1, #21
 8000456:	430a      	orrs	r2, r1
 8000458:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40021000 	.word	0x40021000

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <NMI_Handler+0x4>

0800046a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <HardFault_Handler+0x4>

08000470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000488:	f000 f956 	bl	8000738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
 80004a6:	2300      	movs	r3, #0
 80004a8:	613b      	str	r3, [r7, #16]
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004b6:	4b4e      	ldr	r3, [pc, #312]	; (80005f0 <SystemCoreClockUpdate+0x154>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	220c      	movs	r2, #12
 80004bc:	4013      	ands	r3, r2
 80004be:	617b      	str	r3, [r7, #20]

  switch (tmp)
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	2b08      	cmp	r3, #8
 80004c4:	d024      	beq.n	8000510 <SystemCoreClockUpdate+0x74>
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	2b08      	cmp	r3, #8
 80004ca:	d825      	bhi.n	8000518 <SystemCoreClockUpdate+0x7c>
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <SystemCoreClockUpdate+0x3e>
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d00e      	beq.n	80004f6 <SystemCoreClockUpdate+0x5a>
 80004d8:	e01e      	b.n	8000518 <SystemCoreClockUpdate+0x7c>
  {
    case 0x00U:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
 80004da:	4b45      	ldr	r3, [pc, #276]	; (80005f0 <SystemCoreClockUpdate+0x154>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	0b5b      	lsrs	r3, r3, #13
 80004e0:	2207      	movs	r2, #7
 80004e2:	4013      	ands	r3, r2
 80004e4:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3301      	adds	r3, #1
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	0212      	lsls	r2, r2, #8
 80004ee:	409a      	lsls	r2, r3
 80004f0:	4b40      	ldr	r3, [pc, #256]	; (80005f4 <SystemCoreClockUpdate+0x158>)
 80004f2:	601a      	str	r2, [r3, #0]
      break;
 80004f4:	e069      	b.n	80005ca <SystemCoreClockUpdate+0x12e>
    case 0x04U:  /* HSI used as system clock */
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80004f6:	4b3e      	ldr	r3, [pc, #248]	; (80005f0 <SystemCoreClockUpdate+0x154>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2210      	movs	r2, #16
 80004fc:	4013      	ands	r3, r2
 80004fe:	d003      	beq.n	8000508 <SystemCoreClockUpdate+0x6c>
      {
        SystemCoreClock = HSI_VALUE / 4U;
 8000500:	4b3c      	ldr	r3, [pc, #240]	; (80005f4 <SystemCoreClockUpdate+0x158>)
 8000502:	4a3d      	ldr	r2, [pc, #244]	; (80005f8 <SystemCoreClockUpdate+0x15c>)
 8000504:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = HSI_VALUE;
      }
      break;
 8000506:	e060      	b.n	80005ca <SystemCoreClockUpdate+0x12e>
        SystemCoreClock = HSI_VALUE;
 8000508:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <SystemCoreClockUpdate+0x158>)
 800050a:	4a3c      	ldr	r2, [pc, #240]	; (80005fc <SystemCoreClockUpdate+0x160>)
 800050c:	601a      	str	r2, [r3, #0]
      break;
 800050e:	e05c      	b.n	80005ca <SystemCoreClockUpdate+0x12e>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000510:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <SystemCoreClockUpdate+0x158>)
 8000512:	4a3b      	ldr	r2, [pc, #236]	; (8000600 <SystemCoreClockUpdate+0x164>)
 8000514:	601a      	str	r2, [r3, #0]
      break;
 8000516:	e058      	b.n	80005ca <SystemCoreClockUpdate+0x12e>
    default:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000518:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <SystemCoreClockUpdate+0x154>)
 800051a:	68da      	ldr	r2, [r3, #12]
 800051c:	23f0      	movs	r3, #240	; 0xf0
 800051e:	039b      	lsls	r3, r3, #14
 8000520:	4013      	ands	r3, r2
 8000522:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000524:	4b32      	ldr	r3, [pc, #200]	; (80005f0 <SystemCoreClockUpdate+0x154>)
 8000526:	68da      	ldr	r2, [r3, #12]
 8000528:	23c0      	movs	r3, #192	; 0xc0
 800052a:	041b      	lsls	r3, r3, #16
 800052c:	4013      	ands	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	0c9b      	lsrs	r3, r3, #18
 8000534:	4a33      	ldr	r2, [pc, #204]	; (8000604 <SystemCoreClockUpdate+0x168>)
 8000536:	5cd3      	ldrb	r3, [r2, r3]
 8000538:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	0d9b      	lsrs	r3, r3, #22
 800053e:	3301      	adds	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]

      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <SystemCoreClockUpdate+0x154>)
 8000544:	68da      	ldr	r2, [r3, #12]
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	025b      	lsls	r3, r3, #9
 800054a:	4013      	ands	r3, r2
 800054c:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00U)
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d128      	bne.n	80005a6 <SystemCoreClockUpdate+0x10a>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <SystemCoreClockUpdate+0x154>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2210      	movs	r2, #16
 800055a:	4013      	ands	r3, r2
 800055c:	d011      	beq.n	8000582 <SystemCoreClockUpdate+0xe6>
        {
          SystemCoreClock = (((HSI_VALUE / 4U) * pllmul) / plldiv);
 800055e:	6939      	ldr	r1, [r7, #16]
 8000560:	000a      	movs	r2, r1
 8000562:	0152      	lsls	r2, r2, #5
 8000564:	1a52      	subs	r2, r2, r1
 8000566:	0193      	lsls	r3, r2, #6
 8000568:	1a9b      	subs	r3, r3, r2
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	185b      	adds	r3, r3, r1
 800056e:	021b      	lsls	r3, r3, #8
 8000570:	68f9      	ldr	r1, [r7, #12]
 8000572:	0018      	movs	r0, r3
 8000574:	f7ff fdc8 	bl	8000108 <__udivsi3>
 8000578:	0003      	movs	r3, r0
 800057a:	001a      	movs	r2, r3
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <SystemCoreClockUpdate+0x158>)
 800057e:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000580:	e022      	b.n	80005c8 <SystemCoreClockUpdate+0x12c>
          SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000582:	6939      	ldr	r1, [r7, #16]
 8000584:	000a      	movs	r2, r1
 8000586:	0152      	lsls	r2, r2, #5
 8000588:	1a52      	subs	r2, r2, r1
 800058a:	0193      	lsls	r3, r2, #6
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	185b      	adds	r3, r3, r1
 8000592:	029b      	lsls	r3, r3, #10
 8000594:	68f9      	ldr	r1, [r7, #12]
 8000596:	0018      	movs	r0, r3
 8000598:	f7ff fdb6 	bl	8000108 <__udivsi3>
 800059c:	0003      	movs	r3, r0
 800059e:	001a      	movs	r2, r3
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <SystemCoreClockUpdate+0x158>)
 80005a2:	601a      	str	r2, [r3, #0]
      break;
 80005a4:	e010      	b.n	80005c8 <SystemCoreClockUpdate+0x12c>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 80005a6:	6939      	ldr	r1, [r7, #16]
 80005a8:	000a      	movs	r2, r1
 80005aa:	0152      	lsls	r2, r2, #5
 80005ac:	1a52      	subs	r2, r2, r1
 80005ae:	0193      	lsls	r3, r2, #6
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	185b      	adds	r3, r3, r1
 80005b6:	025b      	lsls	r3, r3, #9
 80005b8:	68f9      	ldr	r1, [r7, #12]
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fda4 	bl	8000108 <__udivsi3>
 80005c0:	0003      	movs	r3, r0
 80005c2:	001a      	movs	r2, r3
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <SystemCoreClockUpdate+0x158>)
 80005c6:	601a      	str	r2, [r3, #0]
      break;
 80005c8:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <SystemCoreClockUpdate+0x154>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	220f      	movs	r2, #15
 80005d2:	4013      	ands	r3, r2
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <SystemCoreClockUpdate+0x16c>)
 80005d6:	5cd3      	ldrb	r3, [r2, r3]
 80005d8:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <SystemCoreClockUpdate+0x158>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	40da      	lsrs	r2, r3
 80005e2:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <SystemCoreClockUpdate+0x158>)
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b006      	add	sp, #24
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	40021000 	.word	0x40021000
 80005f4:	20000000 	.word	0x20000000
 80005f8:	003d0900 	.word	0x003d0900
 80005fc:	00f42400 	.word	0x00f42400
 8000600:	007a1200 	.word	0x007a1200
 8000604:	08000ce0 	.word	0x08000ce0
 8000608:	08000cd0 	.word	0x08000cd0

0800060c <Reset_Handler>:
 800060c:	4813      	ldr	r0, [pc, #76]	; (800065c <LoopForever+0x2>)
 800060e:	4685      	mov	sp, r0
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <LoopForever+0x6>)
 8000612:	6801      	ldr	r1, [r0, #0]
 8000614:	0e09      	lsrs	r1, r1, #24
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <LoopForever+0xa>)
 8000618:	4291      	cmp	r1, r2
 800061a:	d105      	bne.n	8000628 <ApplicationStart>
 800061c:	4812      	ldr	r0, [pc, #72]	; (8000668 <LoopForever+0xe>)
 800061e:	4913      	ldr	r1, [pc, #76]	; (800066c <LoopForever+0x12>)
 8000620:	6001      	str	r1, [r0, #0]
 8000622:	4813      	ldr	r0, [pc, #76]	; (8000670 <LoopForever+0x16>)
 8000624:	4913      	ldr	r1, [pc, #76]	; (8000674 <LoopForever+0x1a>)
 8000626:	6001      	str	r1, [r0, #0]

08000628 <ApplicationStart>:
 8000628:	4813      	ldr	r0, [pc, #76]	; (8000678 <LoopForever+0x1e>)
 800062a:	4914      	ldr	r1, [pc, #80]	; (800067c <LoopForever+0x22>)
 800062c:	4a14      	ldr	r2, [pc, #80]	; (8000680 <LoopForever+0x26>)
 800062e:	2300      	movs	r3, #0
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:
 8000632:	58d4      	ldr	r4, [r2, r3]
 8000634:	50c4      	str	r4, [r0, r3]
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:
 8000638:	18c4      	adds	r4, r0, r3
 800063a:	428c      	cmp	r4, r1
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <LoopForever+0x2a>)
 8000640:	4c11      	ldr	r4, [pc, #68]	; (8000688 <LoopForever+0x2e>)
 8000642:	2300      	movs	r3, #0
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:
 800064a:	42a2      	cmp	r2, r4
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>
 800064e:	f7ff ff20 	bl	8000492 <SystemInit>
 8000652:	f000 fb0d 	bl	8000c70 <__libc_init_array>
 8000656:	f7ff fe75 	bl	8000344 <main>

0800065a <LoopForever>:
 800065a:	e7fe      	b.n	800065a <LoopForever>
 800065c:	20000800 	.word	0x20000800
 8000660:	00000004 	.word	0x00000004
 8000664:	0000001f 	.word	0x0000001f
 8000668:	40021034 	.word	0x40021034
 800066c:	00000001 	.word	0x00000001
 8000670:	40010000 	.word	0x40010000
 8000674:	00000000 	.word	0x00000000
 8000678:	20000000 	.word	0x20000000
 800067c:	2000000c 	.word	0x2000000c
 8000680:	08000cf4 	.word	0x08000cf4
 8000684:	2000000c 	.word	0x2000000c
 8000688:	20000030 	.word	0x20000030

0800068c <ADC1_COMP_IRQHandler>:
 800068c:	e7fe      	b.n	800068c <ADC1_COMP_IRQHandler>
	...

08000690 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <HAL_Init+0x3c>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_Init+0x3c>)
 80006a2:	2140      	movs	r1, #64	; 0x40
 80006a4:	430a      	orrs	r2, r1
 80006a6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 f811 	bl	80006d0 <HAL_InitTick>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d003      	beq.n	80006ba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
 80006b8:	e001      	b.n	80006be <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006ba:	f7ff febf 	bl	800043c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
}
 80006c2:	0018      	movs	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_InitTick+0x5c>)
 80006da:	681c      	ldr	r4, [r3, #0]
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_InitTick+0x60>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	0019      	movs	r1, r3
 80006e2:	23fa      	movs	r3, #250	; 0xfa
 80006e4:	0098      	lsls	r0, r3, #2
 80006e6:	f7ff fd0f 	bl	8000108 <__udivsi3>
 80006ea:	0003      	movs	r3, r0
 80006ec:	0019      	movs	r1, r3
 80006ee:	0020      	movs	r0, r4
 80006f0:	f7ff fd0a 	bl	8000108 <__udivsi3>
 80006f4:	0003      	movs	r3, r0
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 f905 	bl	8000906 <HAL_SYSTICK_Config>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000700:	2301      	movs	r3, #1
 8000702:	e00f      	b.n	8000724 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b03      	cmp	r3, #3
 8000708:	d80b      	bhi.n	8000722 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	2301      	movs	r3, #1
 800070e:	425b      	negs	r3, r3
 8000710:	2200      	movs	r2, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f000 f8e2 	bl	80008dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_InitTick+0x64>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	e000      	b.n	8000724 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b003      	add	sp, #12
 800072a:	bd90      	pop	{r4, r7, pc}
 800072c:	20000000 	.word	0x20000000
 8000730:	20000008 	.word	0x20000008
 8000734:	20000004 	.word	0x20000004

08000738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_IncTick+0x1c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	001a      	movs	r2, r3
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_IncTick+0x20>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	18d2      	adds	r2, r2, r3
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <HAL_IncTick+0x20>)
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	20000008 	.word	0x20000008
 8000758:	2000002c 	.word	0x2000002c

0800075c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  return uwTick;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <HAL_GetTick+0x10>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	2000002c 	.word	0x2000002c

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff fff0 	bl	800075c <HAL_GetTick>
 800077c:	0003      	movs	r3, r0
 800077e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3301      	adds	r3, #1
 8000788:	d005      	beq.n	8000796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_Delay+0x44>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	001a      	movs	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	189b      	adds	r3, r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	f7ff ffe0 	bl	800075c <HAL_GetTick>
 800079c:	0002      	movs	r2, r0
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d8f7      	bhi.n	8000798 <HAL_Delay+0x28>
  {
  }
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b004      	add	sp, #16
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	20000008 	.word	0x20000008

080007b8 <__NVIC_SetPriority>:
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b7f      	cmp	r3, #127	; 0x7f
 80007cc:	d828      	bhi.n	8000820 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ce:	4a2f      	ldr	r2, [pc, #188]	; (800088c <__NVIC_SetPriority+0xd4>)
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	33c0      	adds	r3, #192	; 0xc0
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	589b      	ldr	r3, [r3, r2]
 80007de:	1dfa      	adds	r2, r7, #7
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	0011      	movs	r1, r2
 80007e4:	2203      	movs	r2, #3
 80007e6:	400a      	ands	r2, r1
 80007e8:	00d2      	lsls	r2, r2, #3
 80007ea:	21ff      	movs	r1, #255	; 0xff
 80007ec:	4091      	lsls	r1, r2
 80007ee:	000a      	movs	r2, r1
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	401a      	ands	r2, r3
 80007f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	22ff      	movs	r2, #255	; 0xff
 80007fc:	401a      	ands	r2, r3
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0018      	movs	r0, r3
 8000804:	2303      	movs	r3, #3
 8000806:	4003      	ands	r3, r0
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	481f      	ldr	r0, [pc, #124]	; (800088c <__NVIC_SetPriority+0xd4>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b25b      	sxtb	r3, r3
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	430a      	orrs	r2, r1
 8000818:	33c0      	adds	r3, #192	; 0xc0
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	501a      	str	r2, [r3, r0]
}
 800081e:	e031      	b.n	8000884 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <__NVIC_SetPriority+0xd8>)
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	0019      	movs	r1, r3
 8000828:	230f      	movs	r3, #15
 800082a:	400b      	ands	r3, r1
 800082c:	3b08      	subs	r3, #8
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	3306      	adds	r3, #6
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	18d3      	adds	r3, r2, r3
 8000836:	3304      	adds	r3, #4
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	1dfa      	adds	r2, r7, #7
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	0011      	movs	r1, r2
 8000840:	2203      	movs	r2, #3
 8000842:	400a      	ands	r2, r1
 8000844:	00d2      	lsls	r2, r2, #3
 8000846:	21ff      	movs	r1, #255	; 0xff
 8000848:	4091      	lsls	r1, r2
 800084a:	000a      	movs	r2, r1
 800084c:	43d2      	mvns	r2, r2
 800084e:	401a      	ands	r2, r3
 8000850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	019b      	lsls	r3, r3, #6
 8000856:	22ff      	movs	r2, #255	; 0xff
 8000858:	401a      	ands	r2, r3
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	0018      	movs	r0, r3
 8000860:	2303      	movs	r3, #3
 8000862:	4003      	ands	r3, r0
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <__NVIC_SetPriority+0xd8>)
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	001c      	movs	r4, r3
 8000870:	230f      	movs	r3, #15
 8000872:	4023      	ands	r3, r4
 8000874:	3b08      	subs	r3, #8
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	430a      	orrs	r2, r1
 800087a:	3306      	adds	r3, #6
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	18c3      	adds	r3, r0, r3
 8000880:	3304      	adds	r3, #4
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b003      	add	sp, #12
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <SysTick_Config>:
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	045b      	lsls	r3, r3, #17
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d301      	bcc.n	80008ac <SysTick_Config+0x18>
    return (1UL);                                                   /* Reload value impossible */
 80008a8:	2301      	movs	r3, #1
 80008aa:	e010      	b.n	80008ce <SysTick_Config+0x3a>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <SysTick_Config+0x44>)
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	3a01      	subs	r2, #1
 80008b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b4:	2301      	movs	r3, #1
 80008b6:	425b      	negs	r3, r3
 80008b8:	2103      	movs	r1, #3
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff ff7c 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <SysTick_Config+0x44>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <SysTick_Config+0x44>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	e000e010 	.word	0xe000e010

080008dc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	210f      	movs	r1, #15
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	1c02      	adds	r2, r0, #0
 80008ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff ff5d 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b004      	add	sp, #16
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff ffbf 	bl	8000894 <SysTick_Config>
 8000916:	0003      	movs	r3, r0
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <ADC_calibrate>:
 *      Author: burak
 */
#include "adc.h"

void ADC_calibrate ( ADC_TypeDef* ADCx )
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	if ((ADCx->CR & ADC_CR_ADEN) != 0) /* (1) */ {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	2201      	movs	r2, #1
 800092e:	4013      	ands	r3, r2
 8000930:	d005      	beq.n	800093e <ADC_calibrate+0x1e>
	ADCx->CR |= ADC_CR_ADDIS; /* (2) */ }
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	2202      	movs	r2, #2
 8000938:	431a      	orrs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	609a      	str	r2, [r3, #8]
	ADCx->CR |= ADC_CR_ADCAL; /* (3) */
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	0612      	lsls	r2, r2, #24
 8000946:	431a      	orrs	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	609a      	str	r2, [r3, #8]
	while ((ADCx->ISR & ADC_ISR_EOCAL) == 0) /* (4) */ {
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	4013      	ands	r3, r2
 8000958:	d0f9      	beq.n	800094e <ADC_calibrate+0x2e>
	             /* For robust implementation, add here time-out management */
	}
	ADCx->ISR |= ADC_ISR_EOCAL; /* (5) */
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	431a      	orrs	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}

08000970 <ADC_init>:

void ADC_init ( ADC_TypeDef* ADCx )
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
//	static bool initialized;
//	if (!initialized) {
//	   initialized = true;
//	   // do the initialization part
//	}
    ADCx->CFGR1 &= ~ADC_CFGR1_RES; // Clear the RES bits
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	2218      	movs	r2, #24
 800097e:	4393      	bics	r3, r2
 8000980:	001a      	movs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60da      	str	r2, [r3, #12]
    ADCx->CFGR1 |= ADC_CFGR1_RES_1; // Set the ADC resolution to 8-bit
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	2210      	movs	r2, #16
 800098c:	431a      	orrs	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60da      	str	r2, [r3, #12]
    ADCx->CFGR1 &= ~ADC_CFGR1_ALIGN; // Clear the ALIGN bit
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	2220      	movs	r2, #32
 8000998:	4393      	bics	r3, r2
 800099a:	001a      	movs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	60da      	str	r2, [r3, #12]
    ADCx->SMPR |= (ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2); //Sampling time 12.5 + 160.5 clock cycles
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	2207      	movs	r2, #7
 80009a6:	431a      	orrs	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	615a      	str	r2, [r3, #20]

    // Configure the input channel
    ADCx->CHSELR = ADC_CHSELR_CHSEL4; // Select channel 4 PA4 nucleo32 A3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2210      	movs	r2, #16
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28

    // Enable the ADC
    ADCx->CR |= ADC_CR_ADEN;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	2201      	movs	r2, #1
 80009b8:	431a      	orrs	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	609a      	str	r2, [r3, #8]
    while(!(ADCx->ISR & ADC_ISR_ADRDY));
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2201      	movs	r2, #1
 80009c6:	4013      	ands	r3, r2
 80009c8:	d0fa      	beq.n	80009c0 <ADC_init+0x50>
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <EXTI0_1_IRQHandler>:
	NVIC_EnableIRQ(EXTI0_1_IRQn);
	NVIC_SetPriority(EXTI0_1_IRQn,0);
}

void EXTI0_1_IRQHandler ( void )
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	countPerInterrupt++;
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <EXTI0_1_IRQHandler+0x18>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	3301      	adds	r3, #1
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	4b02      	ldr	r3, [pc, #8]	; (80009ec <EXTI0_1_IRQHandler+0x18>)
 80009e4:	801a      	strh	r2, [r3, #0]
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000028 	.word	0x20000028

080009f0 <GPIO_Start_Output>:
 *      Author: burak
 */
#include "gpio.h"

void GPIO_Start_Output ( GPIO_TypeDef* GPIOx, uint32_t GPIO_PINx, OUTPUT_Speed OUTPUT_Speedx  )
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	701a      	strb	r2, [r3, #0]
	uint32_t tmp = ( GPIO_PINx * GPIO_PINx );
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	435b      	muls	r3, r3
 8000a02:	613b      	str	r3, [r7, #16]
	uint32_t position = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
	while( ( tmp >> position ) != 1)
 8000a08:	e002      	b.n	8000a10 <GPIO_Start_Output+0x20>
	{
		position++;
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
	while( ( tmp >> position ) != 1)
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	40da      	lsrs	r2, r3
 8000a16:	0013      	movs	r3, r2
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d1f6      	bne.n	8000a0a <GPIO_Start_Output+0x1a>
	}
	GPIOx->MODER   |= ( 1 <<  position); // OUTPUT
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4091      	lsls	r1, r2
 8000a26:	000a      	movs	r2, r1
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	601a      	str	r2, [r3, #0]
	GPIOx->MODER   &= ~( 2 << position ); // OUTPUT
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2102      	movs	r1, #2
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	4091      	lsls	r1, r2
 8000a38:	000a      	movs	r2, r1
 8000a3a:	43d2      	mvns	r2, r2
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	601a      	str	r2, [r3, #0]
	GPIOx->OTYPER  &= ~( 1 << GPIO_PINx ); //OUTPUT PUSH_PULL
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2101      	movs	r1, #1
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	000a      	movs	r2, r1
 8000a4e:	43d2      	mvns	r2, r2
 8000a50:	401a      	ands	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	605a      	str	r2, [r3, #4]
	GPIOx->OSPEEDR |= ( OUTPUT_Speedx << ( position ) ); //OUTUT SPEED
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	1dfa      	adds	r2, r7, #7
 8000a5c:	7811      	ldrb	r1, [r2, #0]
 8000a5e:	697a      	ldr	r2, [r7, #20]
 8000a60:	4091      	lsls	r1, r2
 8000a62:	000a      	movs	r2, r1
 8000a64:	431a      	orrs	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	609a      	str	r2, [r3, #8]
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b006      	add	sp, #24
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <GPIO_Write>:
	GPIOx->MODER &= ~( 3 << (GPIO_PINx * GPIO_PINx)); // INPUT
	GPIOx->PUPDR |= ( PUPDx << ( GPIO_PINx * GPIO_PINx ) ); //PULL_UP PULL_DOWN Selection
}

void GPIO_Write ( GPIO_TypeDef* GPIOx, uint32_t GPIO_PIN, GPIO_STATE GPIO_STATEx )
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	701a      	strb	r2, [r3, #0]
	if( GPIO_STATEx == 1 )
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d106      	bne.n	8000a96 <GPIO_Write+0x24>
	{
		GPIOx->BSRR |= GPIO_PIN; // Set pin HIGH
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	699a      	ldr	r2, [r3, #24]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	619a      	str	r2, [r3, #24]
	else
	{
		GPIOx->BRR = GPIO_PIN;// Set pin LOW
	}

}
 8000a94:	e002      	b.n	8000a9c <GPIO_Write+0x2a>
		GPIOx->BRR = GPIO_PIN;// Set pin LOW
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b004      	add	sp, #16
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <SystemClock_Config>:
 */

#include "systemclockconfig.h"

void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

	RCC->CR |= RCC_CR_HSION; //Activate HSI
 8000aa8:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <SystemClock_Config+0xe4>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <SystemClock_Config+0xe4>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	601a      	str	r2, [r3, #0]

	while (RCC->CR & RCC_CR_HSIRDY); //Wait until the HSI is ready
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <SystemClock_Config+0xe4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2204      	movs	r2, #4
 8000abc:	4013      	ands	r3, r2
 8000abe:	d1fa      	bne.n	8000ab6 <SystemClock_Config+0x12>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN; //Activating the clock source of PWR
 8000ac0:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <SystemClock_Config+0xe4>)
 8000ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac4:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <SystemClock_Config+0xe4>)
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	0549      	lsls	r1, r1, #21
 8000aca:	430a      	orrs	r2, r1
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
	PWR->CR |= PWR_CR_VOS_0; //Voltage regulator output is 1.8V
 8000ace:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <SystemClock_Config+0xe8>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <SystemClock_Config+0xe8>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	0109      	lsls	r1, r1, #4
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
	PWR->CR &= ~PWR_CR_VOS_1; //Performance max power consumption max
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <SystemClock_Config+0xe8>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <SystemClock_Config+0xe8>)
 8000ae2:	492b      	ldr	r1, [pc, #172]	; (8000b90 <SystemClock_Config+0xec>)
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]

	FLASH->ACR &= FLASH_ACR_LATENCY; //0 latency
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <SystemClock_Config+0xf0>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <SystemClock_Config+0xf0>)
 8000aee:	2101      	movs	r1, #1
 8000af0:	400a      	ands	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]

	RCC->CFGR |= RCC_CFGR_HPRE_DIV2; //HCLK prescaler 2 HCLK is 16/2 = 8 MHZ
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <SystemClock_Config+0xe4>)
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <SystemClock_Config+0xe4>)
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	430a      	orrs	r2, r1
 8000afe:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1; //APB1 prescaler 1 APB1 is 8 MHZ
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b04:	68d2      	ldr	r2, [r2, #12]
 8000b06:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; //APB2 prescaler 1 APB2 is 8 MHZ
 8000b08:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b0c:	68d2      	ldr	r2, [r2, #12]
 8000b0e:	60da      	str	r2, [r3, #12]

	RCC->CFGR |= RCC_CFGR_SW_0; //Set HSI16 as SYSCLK
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	60da      	str	r2, [r3, #12]
	RCC->CFGR &= ~RCC_CFGR_SW_1; //Set HSI16 as SYSCLK
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b22:	2102      	movs	r1, #2
 8000b24:	438a      	bics	r2, r1
 8000b26:	60da      	str	r2, [r3, #12]

	RCC->IOPENR |= RCC_IOPENR_GPIOAEN; //Enable GPIOA clock
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	430a      	orrs	r2, r1
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN; //Enable GPIOB clock
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; //Enable TIM2 clock
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b46:	2101      	movs	r1, #1
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; //Enable UART clock
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0289      	lsls	r1, r1, #10
 8000b56:	430a      	orrs	r2, r1
 8000b58:	639a      	str	r2, [r3, #56]	; 0x38

	RCC->AHBENR |= RCC_AHBENR_DMA1EN; //Enable DMA clock
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	430a      	orrs	r2, r1
 8000b64:	631a      	str	r2, [r3, #48]	; 0x30

	RCC->APB2ENR |= RCC_APB2ENR_ADCEN; //Enable ADC clock
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	0089      	lsls	r1, r1, #2
 8000b70:	430a      	orrs	r2, r1
 8000b72:	635a      	str	r2, [r3, #52]	; 0x34

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; //Enable SYSCFG clock
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <SystemClock_Config+0xe4>)
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40007000 	.word	0x40007000
 8000b90:	ffffefff 	.word	0xffffefff
 8000b94:	40022000 	.word	0x40022000

08000b98 <__NVIC_EnableIRQ>:
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	0002      	movs	r2, r0
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8000baa:	d809      	bhi.n	8000bc0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	231f      	movs	r3, #31
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_EnableIRQ+0x30>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	000a      	movs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <TIM_Start>:
 */

#include "timer.h"

void TIM_Start( TIM_TypeDef* TIMx )
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	  // Clock divided by 7999 + 1
	  TIM2->PSC = 7999;
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <TIM_Start+0x48>)
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
	  // ARR is 999 + 1
	  TIM2->ARR = 999;
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <TIM_Start+0x4c>)
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
	  //So the maximum time can be measured is 1s

	  TIM2->DIER |= TIM_DIER_UIE;
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	05db      	lsls	r3, r3, #23
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2101      	movs	r1, #1
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	60da      	str	r2, [r3, #12]
	  NVIC_EnableIRQ(TIM2_IRQn);
 8000bf4:	200f      	movs	r0, #15
 8000bf6:	f7ff ffcf 	bl	8000b98 <__NVIC_EnableIRQ>

	  TIM2->CR1 |= TIM_CR1_CEN;
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	2101      	movs	r1, #1
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b002      	add	sp, #8
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	00001f3f 	.word	0x00001f3f
 8000c18:	000003e7 	.word	0x000003e7

08000c1c <TIM2_IRQHandler>:

void TIM2_IRQHandler ( void )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	if((TIM2->SR & TIM_SR_UIF) == 1)
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	2201      	movs	r2, #1
 8000c28:	4013      	ands	r3, r2
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d10a      	bne.n	8000c44 <TIM2_IRQHandler+0x28>
	{
		oneSecondIsOver = 1;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <TIM2_IRQHandler+0x30>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
		TIM2->SR &= ~TIM_SR_UIF;
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	2101      	movs	r1, #1
 8000c40:	438a      	bics	r2, r1
 8000c42:	611a      	str	r2, [r3, #16]
	}
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	2000002a 	.word	0x2000002a

08000c50 <UART_init>:
 */

#include "uart.h"

void UART_init( USART_TypeDef* USARTx )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	//1 Start bit, 8 data bits, n stop bits
	USARTx->BRR = 0x341;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <UART_init+0x1c>)
 8000c5c:	60da      	str	r2, [r3, #12]
	USARTx->CR1 = USART_CR1_TE | USART_CR1_UE | USART_CR1_RE;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	220d      	movs	r2, #13
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	00000341 	.word	0x00000341

08000c70 <__libc_init_array>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	2600      	movs	r6, #0
 8000c74:	4d0c      	ldr	r5, [pc, #48]	; (8000ca8 <__libc_init_array+0x38>)
 8000c76:	4c0d      	ldr	r4, [pc, #52]	; (8000cac <__libc_init_array+0x3c>)
 8000c78:	1b64      	subs	r4, r4, r5
 8000c7a:	10a4      	asrs	r4, r4, #2
 8000c7c:	42a6      	cmp	r6, r4
 8000c7e:	d109      	bne.n	8000c94 <__libc_init_array+0x24>
 8000c80:	2600      	movs	r6, #0
 8000c82:	f000 f819 	bl	8000cb8 <_init>
 8000c86:	4d0a      	ldr	r5, [pc, #40]	; (8000cb0 <__libc_init_array+0x40>)
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <__libc_init_array+0x44>)
 8000c8a:	1b64      	subs	r4, r4, r5
 8000c8c:	10a4      	asrs	r4, r4, #2
 8000c8e:	42a6      	cmp	r6, r4
 8000c90:	d105      	bne.n	8000c9e <__libc_init_array+0x2e>
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	00b3      	lsls	r3, r6, #2
 8000c96:	58eb      	ldr	r3, [r5, r3]
 8000c98:	4798      	blx	r3
 8000c9a:	3601      	adds	r6, #1
 8000c9c:	e7ee      	b.n	8000c7c <__libc_init_array+0xc>
 8000c9e:	00b3      	lsls	r3, r6, #2
 8000ca0:	58eb      	ldr	r3, [r5, r3]
 8000ca2:	4798      	blx	r3
 8000ca4:	3601      	adds	r6, #1
 8000ca6:	e7f2      	b.n	8000c8e <__libc_init_array+0x1e>
 8000ca8:	08000cec 	.word	0x08000cec
 8000cac:	08000cec 	.word	0x08000cec
 8000cb0:	08000cec 	.word	0x08000cec
 8000cb4:	08000cf0 	.word	0x08000cf0

08000cb8 <_init>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr

08000cc4 <_fini>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr
